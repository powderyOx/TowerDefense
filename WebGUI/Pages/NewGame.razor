@page "/newgame"
@using Domain.Repositories.Interfaces
@using Model.Entities
@inject IRepository<SavedGame> _gameRepository;
@inject ISavedGameRepository _savedGameRepository
@inject ILogger<SavedGame> _logger
@inject NavigationManager _navManager

<h3>NewGame</h3>

<EditForm Model="@Game" class="form" OnValidSubmit="async () => await CreateGame()">
    <DataAnnotationsValidator/>
    <InputText id="strength-input" class="form-text" @bind-Value="@Game.Name"/>
    <ValidationMessage For="() => Game.Name"></ValidationMessage>
    <p class="text-danger">@message</p>
    <button type="submit" class="btn">Submit</button>
</EditForm>

@code {
    public SavedGame Game { get; set; } = new();
    public List<SavedGame> GameList { get; set; }

    public SavedGame Jo { get; set; }

    public string message { get; set; } = "";


    public async Task CreateGame() {

        Game.Money = 200;
        Game.Round = 1;
        Game.HP = 100;

        GameList = await _gameRepository.ReadAllAsync();

        if (GameList.Exists(g => g.Name == Game.Name)) {
            message = "Name already exists";
        }
        else {
            await _gameRepository.CreateAsync(Game);
            Jo = (await _savedGameRepository.ReadGraphAsync(s => s.SavedGameId == Game.SavedGameId)).First();
            _logger.LogInformation("Game created!");
            _navManager.NavigateTo($"/map/{Jo.MapEntities}");
        }
    }

    
}