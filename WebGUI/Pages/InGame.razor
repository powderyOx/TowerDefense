@page "/map/{SavedGameId:int}"
@using Model.Entities.Map
@using Domain.Repositories.Interfaces
@using Model.Entities
@inherits LayoutComponentBase
@inject IMapRepository _mapRepository
@inject ISavedGameRepository _sgRepository


<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<div style="text-align: center ">
    <div class="m-auto">
        <ul class="list-group list-group-horizontal">
            <li class="list-group-item">@sg.Name</li>
            <li class="list-group-item">@sg.Round</li>
            <li class="list-group-item">@sg.HP</li>
            <li class="list-group-item">@sg.Money</li>
        </ul>
    </div>
    <MudLayout> <!-- alles in Mudlyout geht -->
        <MudMainContent>
            @if (FieldList is not null) {
                @for (int i = 0; i < FieldList.GetMaxX(); i++) {
                    @for (int j = 0; j < FieldList.GetMinY(); j++) {
                        @if (FieldList.Contains(i, j)) {
                            <img src="@FieldList.GetField(i,j).GetFieldType()" alt="image"/>
                        }
                    }
                    <br/>
                }
            }
        </MudMainContent>
    </MudLayout>
    @if(sg is not null)
    {
        @sg.Name
    }

</div>




@code {
    [Parameter]
    public int SavedGameId { get; set; } // geht

    public FieldList FieldList { get; set; } // geht

    public SavedGame sg { get; set; } 
    public string Message { get; set; } = "Loading data ...";

    protected async override Task OnInitializedAsync()
    {
        //sg = await _sgRepository.ReadAsync(SavedGameId); // geht
        var data = await _sgRepository.ReadGraphAsync(s => s.SavedGameId == SavedGameId);
        
        if (data.Count == 0) {
            Message = "no data";
        } else
        {
            sg = data[0];
        }
        
        var map = await _mapRepository.ReadGraphAsync(sg.MapId); // geht
        
        if (map is not null) {
            FieldList = new FieldList(map.Fields); // geht
        }
    }
}