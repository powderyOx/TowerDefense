@page "/map/{SavedGameId:int}"
@using Model.Entities.Map
@using Domain.Repositories.Interfaces
@using Model.Entities
@inherits LayoutComponentBase
@inject IMapRepository _mapRepository
@inject ISavedGameRepository _sgRepository


<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<div style="text-align: center ">
    @if (sg is not null) {
        <div class="m-auto">
            <ul class="list-group list-group-horizontal">
                <li class="list-group-item">@sg.Name</li>
                <li class="list-group-item">@sg.Round</li>
                <li class="list-group-item">@sg.HP</li>
                <li class="list-group-item">@sg.Money</li>
            </ul>
        </div>

        <MudLayout>
            <!-- alles in Mudlyout geht -->
            <MudMainContent>
                @if (FieldList is not null) {
                    @for (int i = 0; i < FieldList.GetMaxX(); i++) {
                        @for (int j = 0; j < FieldList.GetMinY(); j++) {
                            @if (FieldList.Contains(i, j)) {
                                <img src="@FieldList.GetField(i, j).GetFieldType()" alt="image"/>
                            }
                        }
                        <br/>
                    }
                }
            </MudMainContent>
        </MudLayout>


        @foreach (var i in sg.MapEntities) {
            @if (i.X is not null) {
                <p>@i.X</p>
                <p>@i.Y</p>
                <br/>
            }
        }
    }

</div>

@code {

    [Parameter]
    public int SavedGameId { get; set; } // geht

    public FieldList FieldList { get; set; } // geht

    public SavedGame sg { get; set; }

    protected override async Task OnParametersSetAsync() {
        sg = await _sgRepository.ReadGraphAsync(SavedGameId); // geht

        var map = await _mapRepository.ReadGraphAsync(sg.MapId); // geht

        if (map is not null) {
            FieldList = new FieldList(map.Fields); // geht
        }
    }

}