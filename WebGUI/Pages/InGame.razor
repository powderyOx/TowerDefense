@page "/map/{SavedGameId:int}"
@using Model.Entities.Map
@using Domain.Repositories.Interfaces
@using IKriv.Threading.Tasks
@using Model.Entities
@inherits LayoutComponentBase
@inject IMapRepository _mapRepository
@inject ISavedGameRepository _sgRepository


<MudThemeProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<div style="position: absolute; top: 5vh; left: 33%; ">
    <div style="width: 100px; height: 100px; shape-outside: circle(); clip-path: circle(); background-color: #EE5168; position:absolute; top: -20%; left: -6%; z-index: -1;"></div>
    <h1 style="font-size: 100px;">Tower Defense</h1>
</div>
<div style="text-align: center">
    @if (sg is not null) {
        <div class="m-auto">
            <ul class="list-group list-group-horizontal">
                <li class="list-group-item">@sg.Name</li>
                <li class="list-group-item">@sg.Round</li>
                <li class="list-group-item">@sg.HP</li>
                <li class="list-group-item">@sg.Money</li>
            </ul>
        </div>
        <div class="gameField">
            <MudLayout>
                <!-- alles in Mudlyout geht -->
                <MudMainContent>
                    @if (FieldList is not null) {
                        @for (int i = 0; i < FieldList.GetMaxX(); i++) {
                            @for (int j = 0; j < FieldList.GetMinY(); j++) {
                                // Map

                                // Defender
                                @if (MapEntityList.Exists(me => me.X == i && me.Y == j)) {
                                    foreach (var me in MapEntityList.Where(me => me.X == i && me.Y == j)) {
                                        <img src="@me.AEntity.GetEntityType()" alt="@me.AEntity.GetType().Name.ToLower()" class="entity" style="@($"background-image: url('{FieldList.GetField(i, j).GetFieldType()}')")"/>
                                    }
                                }
                                else if (FieldList.Contains(i, j)) {
                                    <img src="@FieldList.GetField(i, j).GetFieldType()" alt="image" class="floor"/>
                                }
                            }
                            <br/>
                        }
                    }
                </MudMainContent>
            </MudLayout>
            </div>
    }
</div>

@code {

    [Parameter]
    public int SavedGameId { get; set; } // geht

    public FieldList FieldList { get; set; } // geht

    public MapEntityList MapEntityList { get; set; }

    public SavedGame sg { get; set; }

    public List<AField> Path { get; set; }

    protected override async Task OnParametersSetAsync() {
        sg = await _sgRepository.ReadGraphAsync(SavedGameId); // geht

        var map = await _mapRepository.ReadGraphAsync(sg.MapId); // geht
        Path = map.GetPath();

        if (map is not null) {
            FieldList = new FieldList(map.Fields); // geht
        }

        if (sg is not null) {
            MapEntityList = new MapEntityList(sg.MapEntities);
        }

        MoveAttackers();
    }

    private void MoveAttacker(MapEntity a) {
        try {
            var next = Path[Path.FindIndex(f => f.X == a.X && f.Y == a.Y) + 1];
            a.X = next.X;
            a.Y = next.Y;
            StateHasChanged();
        }
        catch (ArgumentOutOfRangeException e) {
            a.X = -1;
            a.Y = -1;
            if (sg.HP > 0) {
                sg.HP -= a.AEntity.Damage;
                StateHasChanged();
            }
        }
    }

    async Task MoveAttackers() {
        using var timer = new TaskTimer(1000).Start();
        var i = 0;
        foreach (var task in timer) {
            await task;
            i++;
            foreach (var attacker in MapEntityList.Where(e => e.AEntity is Attacker)) {
                if (i > attacker.StartIndex && attacker.X != -1) MoveAttacker(attacker);
            }
        }
    }

}